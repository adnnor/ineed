#!/bin/bash
# Came from https://github.com/adnnor/ineed
# @author: Adnan Shahzad
# @Email: adnnor@gmail.com

FILE="$0";if [ "$EUID" -ne 0 ];then echo 3>&1 "Run as root e.g. sudo bash ${FILE}";exit;fi;SUDOING_USER="${SUDO_USER}";RESTORE=$(echo -en '\033[0m');RED=$(echo -en '\033[00;31m');GREEN=$(echo -en '\033[00;32m');YELLOW=$(echo -en '\033[00;33m');LRED=$(echo -en '\033[01;31m');ABORT=$(echo -en '\033[07;31m');LGREEN=$(echo -en '\033[01;32m');LYELLOW=$(echo -en '\033[01;33m');BYELLOW=$(echo -en '\033[00;33m');VDIR="${2//./}";OUTPUT="";substr(){ local length=${3};if [ -z "${length}" ];then length=$((${#1} - ${2}));fi;local str=${1:${2}:${length}};if [ "${#str}" -eq "${#1}" ];then echo "${1}";else echo "${str}";fi;};strpos(){ local str=${1};local offset=${3};if [ -n "${offset}" ];then str=`substr "${str}" ${offset}`;else offset=0;fi;str=${str/${2}*/};if [ "${#str}" -eq "${#1}" ];then return 0;fi;echo $((${#str}+${offset}));};abort(){ log "\n${LRED}ERROR!${RESTORE}\n";printf '======\n'&>>"${LOG_FILE}";printf '%s\n' "$1"&>>"${LOG_FILE}";printf '======\n'&>>"${LOG_FILE}";printf "\n\n${ABORT} Execution Interrupted ${RESTORE} Check ${LOG_FILE} for the error details ...\n\n";exit 1;};trap ctrl_c INT;function ctrl_c(){ abort "execution terminated by the user";};log(){ local arg1=${1};local arg2=${2};if [[ $# -eq 2 ]]&&[[ ! -z "$1" ]]&&[[ ! -z "$2" ]];then printf "$arg1" "$arg2"|sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g"&>>"${LOG_FILE}";printf "$arg1" "$arg2" 2>&1;elif [[ $# -eq 1 ]]&&[[ ! -z "$1" ]];then printf "$arg1"|sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g"&>>"${LOG_FILE}";printf "$arg1" 2>&1;else echo "error";fi;};apache_status(){ log "Checking apache2 status ... ";APACHE=`service --status-all|grep apache2`;APACHE_STATUS=$(strpos "${APACHE}" "+");if [ "$APACHE_STATUS" == "" ];then log "${LYELLOW}Oops! It is not running${RESTORE} ... starting apache2 service ";APACHE_ACTIVE=`sudo service apache2 restart 2>&1`;if [ $? -eq 0 ];then log "... ${GREEN}done${RESTORE}, apache is running now! \m/\n";else abort "$APACHE_STATUS";fi;else log "${GREEN}it is running ... (Y)${RESTORE}\n";fi;};es_status(){ log "Checking elasticsearch status ... ";ES=`service --status-all|grep elasticsearch`;ES_STATUS=$(strpos "${ES}" "+");if [ "$ES_STATUS" == "" ];then log "${LYELLOW}\nOops! It is not running${RESTORE} ... \nstarting elasticsearch service ... ";ES_ACTIVE=`sudo service elasticsearch restart 2>&1`;if [ $? -eq 0 ];then log "... ${GREEN}done${RESTORE}, elasticsearch is running now! \m/\n";else abort "$ES_STATUS";fi;else log "${GREEN}it is running ... (Y)${RESTORE}\n";fi;};mysql_status(){ log "Checking MySQL status ... ";MYSQL=`service --status-all|grep mysql`;MYSQL_STATUS=$(strpos "${MYSQL}" "+");if [ "$MYSQL_STATUS" == "" ];then log "${LYELLOW}Oops! It is not running${RESTORE} ... starting mysql service ";MYSQL_ACTIVE=`sudo service mysql restart 2>&1`;if [ $? -eq 0 ];then log "... ${GREEN}done${RESTORE}, mysql is running now! \m/\n";else abort "$MYSQL_ACTIVE";fi;else log "${LGREEN}it is running ... (Y)${RESTORE}\n";fi;};nginx_status(){ log "Checking Nginx status ... ";NGINX=`service --status-all|grep nginx`;NGINX_STATUS=$(strpos "${NGINX}" "+");if [ "$NGINX_STATUS" == "" ];then log "${LYELLOW}Oops! It is not running${RESTORE} ... starting nginx service ";NGINX_ACTIVE=`sudo service nginx restart 2>&1`;if [ $? -eq 0 ];then log "... ${GREEN}done${RESTORE}, nginx is running now! \m/\n";else abort "$NGINX_ACTIVE";fi;else log "${LGREEN}it is running ... (Y)${RESTORE}\n";fi;};SUDOING_USER_DIR=`eval echo "~$SUDOING_USER" 2>&1`;CONFIG_DIR=`mkdir -p "$SUDOING_USER_DIR/.ineed/" 2>&1`;LOG_FILE="$SUDOING_USER_DIR/.ineed/$VDIR.log";CONFIG_FILE="$SUDOING_USER_DIR/.ineed/.config";FILE=$SUDOING_USER_DIR/.ineed/$VDIR.log;if [ ! -f "$CONFIG_FILE" ];then touch "${CONFIG_FILE}";fi;if [ ! -f "$LOG_FILE" ];then touch "${LOG_FILE}";CONFIG_DIR_OWNERSHIP=`sudo chown $SUDOING_USER:$SUDOING_USER $LOG_FILE 2>&1`;else echo>${LOG_FILE};printf "\n%sI have noticed that you may already have this version, make sure of it, otherwise the action may cause data redundancy or data lose!%s\n" "${YELLOW}" "${RESTORE}";printf "\nBefore proceeding keep the following points in your mind;\n\n";printf "%s1. Reinstalling the same version will cause override and results data lose.\n" "${GREEN}";printf "2. If your previous attempt was failed, please check log file for a reason - %s\n\n" "${RESTORE}$LOG_FILE";while [[ -z "$PROCEED_YN" ]];do read -r -p "DO YOU STILL WANT TO PROCEED? ${YELLOW}[Y/n]${RESTORE} " PROCEED_YN;done;if [ "$PROCEED_YN" == "n" ]||[ "$PROCEED_YN" == "Y" ]||[ "$PROCEED_YN" == "y" ];then if [ "$PROCEED_YN" == "n" ];then printf "\nSure! %sOperation terminated!%s Bye :)\n" "${RED}" "${RESTORE}";exit;fi;CONFIG_DIR_OWNERSHIP=`sudo chown $SUDOING_USER:$SUDOING_USER $LOG_FILE 2>&1`;else printf "\n%sInvalid Selection%s - Read and make your mind mate!\n" "${ABORT}" "${RESTORE}";exit;fi;fi;Platforms=('magento');if [ "$1" == "help" ];then printf "%sUsage:%s\n   ineed [platform] [version]\n\n" "${BYELLOW}" "${RESTORE}";printf "%sOptions:%s\n   %shelp%s\t\t\tDisplay this help message\n" "${BYELLOW}" "${RESTORE}" "${GREEN}" ${RESTORE};printf "   %splatforms%s\t\tLists supported platforms\n" "${GREEN}" "${RESTORE}";printf "   %sversions%s\t\tLists supported versions\n\n" "${GREEN}" "${RESTORE}";printf "%sParameters:%s\n" "${BYELLOW}" "${RESTORE}";printf "   %s[platform]%s\t\tRight now I support 'magento'\n" "${GREEN}" "${RESTORE}";printf "   %s[version]%s\t\tLimited versions are supported\n" "${GREEN}" "${RESTORE}";exit;fi;log "Checking requested platform ... ";if [ "$1" == "" ];then log " ${LRED}missing${RESTORE}!\n";Support=false;else for PF in "${Platforms[@]}";do if [ "${Platforms[PF]}" == "$1" ];then log "looks ${LGREEN}good${RESTORE}!\n";break;else log "requested platform ${LRED}is not supported${RESTORE}!\n";Support=false;fi;done;fi;log "Checking version ... ";if [ "$2" == "" ];then log " ${LRED}missing${RESTORE}!\n";Support=false;else log " ${LGREEN}its provided${RESTORE}!\n\n";fi;if [ "$Support" == "false" ];then abort "Invalid syntax, ineed magento 0.0.0";fi;Platform="$1";Version="$2";log "${BYELLOW}Make sure that the provided version is correct otherwise the operation will be terminated.${RESTORE}\n\n";log "Please enter the path where the installation will be saved, make sure that this path is writable to you ($SUDOING_USER), ";read -rp "leave blank for /var/www: " Path;if [ "$Path" == "" ];then Path="/var/www";log ".. nothing given, I will use ${GREEN}$Path${RESTORE} to create the DocumentRoot\n";else Path=$Path;log ".. that's great, ${GREEN}$Path${RESTORE} will be used to create the DocumentRoot.\n";fi;log "Creating required directories under ${GREEN}$Path${RESTORE} ... ";Path_Magento_Base=$Path/rlt;Path_Magento=$Path/rlt/$VDIR/public_html;Path_Magento_Sample_Base=$Path/rlt/$VDIR/sample;Path_Magento_Sample=$Path/rlt/$VDIR/sample/public_html;MAKE_DIR=`mkdir -p "$Path_Magento"&&mkdir -p "$Path_Magento_Sample" 2>&1`;if [ $? -eq 0 ];then OUTPUT="${OUTPUT}\nDirectory created: ${GREEN}$Path_Magento${RESTORE}\n";OUTPUT="${OUTPUT}Directory created: ${GREEN}$Path_Magento_Sample${RESTORE}\n";log "${GREEN}done!${RESTORE}\n";else abort "$MAKE_DIR";fi;log "Setting ownership for the directories as $SUDOING_USER:$SUDOING_USER ... ";OWNERSHIP=`sudo chown $SUDOING_USER:$SUDOING_USER -R $Path_Magento_Base 2>&1`;if [ $? -eq 0 ];then log "${GREEN}done!${RESTORE}\n";else abort "$OWNERSHIP";fi;log "Searching for apache ... ";APACHE_VERSION=$(dpkg -l|awk '$2 ~ /^apache2$/ { print $3 }');if [ ! -z $APACHE_VERSION ];then if dpkg --compare-versions $APACHE_VERSION ge 2.2;then log "${GREEN}ok ... apache2 $APACHE_VERSION found!${RESTORE} \n";apache_status;else log "ok ... ${YELLOW}INCOMPATIBLE${RESTORE} apache2 $APACHE_VERSION found.\n";read -r -p "Update to recent version? [Y/n]: " UPDATE_APACHI_YN;if [ "$UPDATE_APACHI_YN" == "Y" ];then log "Updating apache2 ... ";APACHE_UPDATE=`sudo apt-get --only-upgrade install -y apache2 2>&1`;if [ $? -eq 0 ];then log "... ${GREEN}done!${RESTORE} Considering latest version ;) \n";apache_status;else abort "$APACHE_UPDATE";fi;else log "ok, I am ignoring update!";fi;fi;log "Enabling require apache2 mods ... ";REQ_MOD_ENABLE=`sudo a2enmod rewrite&&sudo a2enmod alias&&sudo a2enmod env&&sudo a2enmod setenvif 2>&1`;if [ $? -eq 0 ];then log "${LGREEN}done!${RESTORE}\n";else abort "$REQ_MOD_ENABLE";fi;else log "${LYELLOW}cannot find${RESTORE} .. \n";log ">> Initiating Apache install ... ";log ">>> Finding and fixing broken packages ... ";APACHE_INSTALL_FIX=`apt-get install -f 2>&1`;if [ $? -eq 0 ];then log "${LGREEN}initiated${RESTORE} ..\n";else abort "$APACHE_INSTALL_FIX";fi;log ">>> Configuring dpkg ... ";APACHE_INSTALL_CONFIGURE_DPKG=`sudo dpkg --configure -a 2>&1`;if [ $? -eq 0 ];then log "${LGREEN}done!${RESTORE}\n";else abort "$APACHE_INSTALL_CONFIGURE_DPKG";fi;log ">>> Installing Apache ... ";APACHE_INSTALL=`sudo apt-get install -y apache2 2>&1`;if [ $? -eq 0 ];then log "${LGREEN}done! \m/${RESTORE}\n\n";else abort "$APACHE_INSTALL";fi;fi;log "Checking configuration for $VDIR.rlt.com ... ";VHOST_PATH="/etc/apache2/sites-available/rlt.conf";if [ ! -f "$VHOST_PATH" ];then touch "${VHOST_PATH}";fi;CHECK_VHOST=`cat $VHOST_PATH|grep -Fq "$VDIR.rlt.com">/dev/null 2>&1`;if [ $? -eq 0 ];then log "${RED}found${RESTORE}!\n\n";log "${RED}WARNING! I have found the configuration under $VHOST_PATH, make sure you are not doing anything wrong, overriding config file may cause unexpected results! ${YELLOW}If the installation is previously failed then nothing to worry about as previous attempt already created the config file${RESTORE}\n";while [[ -z "$PROCEED_VHOST" ]];do read -r -p "Proceed? ${YELLOW}[Y/n]${RESTORE} " PROCEED_VHOST;done;else log "${YELLOW}not found${RESTORE} ...";log " creating under $VHOST_PATH ... ";cat>>"$VHOST_PATH"<<EOF
<VirtualHost *:80>
  ServerAdmin localhost@$VDIR.rlt.com
  ServerName  $VDIR.rlt.com
  ServerAlias $VDIR.rlt.com
  DirectoryIndex index.php
  DocumentRoot $Path_Magento
  <Directory $Path_Magento>
    Options Indexes FollowSymLinks MultiViews
    AllowOverride All
    Require all granted
  </Directory>
  ErrorLog /var/log/apache2/$VDIR.rlt.com.error.log
  CustomLog /var/log/apache2/$VDIR.rlt.com.access.log combined
</VirtualHost>
EOF
log "${GREEN}done!${RESTORE} ;) \n";fi;if [ "$PROCEED_VHOST" == "n" ]||[ "$PROCEED_VHOST" == "N" ];then abort "Virtual Host configuration found under $VHOST_PATH";fi;log "\n${YELLOW}Please consider switching PHP version manually, if you are using FPM, make sure you have mentioned the proxy under $VHOST_PATH file or if you are using PHP as apache module then make sure the required module is activated, if it is not then you can do so by executing a command in terminal sudo a2enmod [PHP_Module]. If you concerned about the Magento performance then prefer using FPM, thank you!${RESTORE}\n\n";log "Adding entry to hosts ... ";CHECK_VHOST=`cat /etc/hosts|grep -Fq "$VDIR.rlt.com">/dev/null 2>&1`;if [ $? -eq 0 ];then log "${RED}found${RESTORE}!\n\n";log "${RED}Host entry also found under /etc/hosts, consider subsequences!${RESTORE}\n";while [[ -z "$PROCEED_HOST" ]];do read -r -p "Proceed? ${YELLOW}[Y/n]${RESTORE} " PROCEED_HOST;done;else ADD_HOST=`echo "127.0.0.1 $VDIR.rlt.com">>/etc/hosts 2>&1`;log "${GREEN}yayyyy ... done!${RESTORE} \n";fi;if [ "$PROCEED_VHOST" == "n" ]||[ "$PROCEED_VHOST" == "N" ];then abort "host entry found under /etc/hosts";fi;log "Enabling configuration for $VDIR.rlt.com ... ";ENABLE_APACHE_CONFIG=`a2ensite "rlt.conf" 2>&1`;if [ $? -eq 0 ];then log "${GREEN}fired!${RESTORE} ;) \n";apache_status;else abort "$ENABLE_APACHE_CONFIG";fi;log "Restarting apache ... ";service apache2 restart;log "${GREEN}done!${RESTORE}\n\n";log "Ok .. now I have to check PHP ...\n\n";PHP_VERSIONS=('7.1' '7.2' '7.3' '7.4');for i in "${PHP_VERSIONS[@]}";do :;PHP_V="php$i-cli";PHP_SEARCH=$(dpkg -l|awk -v pattern="$PHP_V" '$2 ~ pattern { print $3 }');if [ ! -z $PHP_SEARCH ];then log "Found ${GREEN}$PHP_SEARCH${RESTORE}\n";fi;done;log "\nYou can install any version of PHP but make sure you are not repeating any version otherwise you may face subsequences!\n";log "Supported versions are ${GREEN}${PHP_VERSIONS[*]// /,}${RESTORE}\n\n";read -r -p "Enter required version (leave empty to skip): " REQUESTED_PHP_VERSION;if [ "$REQUESTED_PHP_VERSION" != "" ];then log "\nInstalling PHP $REQUESTED_PHP_VERSION and all of its required extensions ...\n";install_php(){ local ext="${1}";log ">> $ext ... ";dpkg -s $ext&>/dev/null;if [ $? -eq 0 ];then log "${LGREEN}found!${RESTORE}\n";else log "${LYELLOW}not found${RESTORE} ... installing ... ";EXT_INSTALL=`sudo apt-get install -y "${ext}" 2>&1`;if [ $? -eq 0 ];then log "${LGREEN}done!${RESTORE}\n";else abort "$EXT_INSTALL";fi;fi;};log ">> installing software properties ... ";PHP_INSTALL=$(apt-get -y install software-properties-common 2>&1);if [ $? -eq 0 ];then log "${LGREEN}done!${RESTORE}\n";log ">> adding repository ... ";grep -h "^deb.*ppa:ondrej/php" /etc/apt/sources.list.d/*>/dev/null 2>&1;if [ $? -ne 0 ];then PHP_INSTALL_1=$(sudo add-apt-repository -y ppa:ondrej/php 2>&1);if [ $? -eq 0 ];then log "${LGREEN}done!${RESTORE}\n";else abort "$PHP_INSTALL_1";fi;else log "${LGREEN}already available, no need to install!${RESTORE}\n";fi;else abort "$PHP_INSTALL";fi;extensions=(libapache2-mod-php$REQUESTED_PHP_VERSION php$REQUESTED_PHP_VERSION-fpm php$REQUESTED_PHP_VERSION-gd php$REQUESTED_PHP_VERSION-xml php$REQUESTED_PHP_VERSION-xml php$REQUESTED_PHP_VERSION-curl php$REQUESTED_PHP_VERSION-mbstring php$REQUESTED_PHP_VERSION-soap php$REQUESTED_PHP_VERSION-mysql php$REQUESTED_PHP_VERSION-cli php$REQUESTED_PHP_VERSION-json php$REQUESTED_PHP_VERSION-common php$REQUESTED_PHP_VERSION-opcache php$REQUESTED_PHP_VERSION-readline php$REQUESTED_PHP_VERSION-intl php$REQUESTED_PHP_VERSION-zip php$REQUESTED_PHP_VERSION-bcmath);for i in "${extensions[@]}";do install_php "$i";done;else log "${YELLOW}Ok, skipped!${RESTORE}\n\n";fi;log "\nSearching for MariaDB or MySQL ... ";MARIA_SEARCH=$(dpkg -l|awk '$2 ~ /^mariadb-server$/ { print $3 }');MYSQL_SEARCH=$(dpkg -l|awk '$2 ~ /^mysql-server/ { print $3 }');if [ ! -z $MARIA_SEARCH ];then if dpkg --compare-versions $MARIA_SEARCH ge 10.2;then log "${GREEN}ok ... MariaDB $MARIA_SEARCH found!${RESTORE} \n";mysql_status;else log "ok ... ${YELLOW}INCOMPATIBLE${RESTORE} MariaDB $MARIA_SEARCH found.\n";read -r -p "Update to recent version? [Y/n]: " UPDATE_MARIA_YN;if [ "$UPDATE_MARIA_YN" == "Y" ];then log "Updating MariaDB ... ";MYSQL_UPDATE=`sudo apt-get --only-upgrade install -y mariadb 2>&1`;if [ $? -eq 0 ];then log "${GREEN}done!${RESTORE} Considering latest version ;) \n";mysql_status;else abort "$MARIA_SEARCH";fi;else log "ok, I am ignoring update!\n";fi;fi;else log "${LYELLOW}Ohh! Failed to find MariaDB,${RESTORE} it's ok ... \nLet's search for MySQL now ... ";if [ ! -z $MYSQL_SEARCH ];then if dpkg --compare-versions $MYSQL_SEARCH ge 5.6;then log "${GREEN}ok ... MySQL $MYSQL_SEARCH found!${RESTORE} \n";mysql_status;else log "ok ... ${YELLOW}INCOMPATIBLE${RESTORE} MySQL $MYSQL_SEARCH found.\n";read -r -p "Update to recent version? [Y/n]: " UPDATE_MYSQL_YN;if [ "$UPDATE_MYSQL_YN" == "Y" ];then log "Updating MySQL ... ";MYSQL_UPDATE=`sudo apt-get --only-upgrade -y install mysql-server mysql-client 2>&1`;if [ $? -eq 0 ];then log "... ${GREEN}done!${RESTORE} Considering latest version ;) \n";mysql_status;else abort "$MYSQL_UPDATE";fi;else log "ok, I am ignoring update!\n";fi;fi;else log "${RED}failed to find MySQL also${RESTORE} :(\n";log "Preferring MariaDB 10.3 (equivalent to MySQL 5.7) ... installing ... ";log "On fresh machine it may take a while, probably upto 5 minutes ... ${YELLOW}BE PATIENT${RESTORE} ... ";MARIADB_SOFT_PROP=`sudo apt-get install -y software-properties-common 2>&1`;if [ ! $? -eq 0 ];then abort "$MARIADB_SOFT_PROP";fi;MARIADB_KEYSERVER=`sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8 2>&1`;if [ ! $? -eq 0 ];then abort "$MARIADB_KEYSERVER";fi;MARIADB_APT_REPO=`sudo add-apt-repository 'deb [arch=amd64] http://mirror.zol.co.zw/mariadb/repo/10.3/ubuntu bionic main' 2>&1`;if [ ! $? -eq 0 ];then abort "$MARIADB_APT_REPO";fi;MARIADB_APT_UPDT=`sudo apt-get update 2>&1`;if [ ! $? -eq 0 ];then abort "$MARIADB_APT_UPDT";fi;export DEBIAN_FRONTEND="noninteractive";sudo debconf-set-selections<<<"maria-db-10.3 mysql-server/root_password password 123abc";sudo debconf-set-selections<<<"maria-db-10.3 mysql-server/root_password_again password 123abc";MYSQL_INSTALL=`sudo apt-get install -y mariadb-server 2>&1`;if [ $? -eq 0 ];then log "${LGREEN}done! \m/${RESTORE}\n";DB_PASS="123abc";log "MariaDB 10.3 Root Password: ${GREEN}123abc${RESTORE}\n\n";else abort "$MYSQL_INSTALL";fi;fi;fi;DB="magento_rlt_$VDIR";DB_USER="root";if [ "$DB_PASS" == "" ];then read -r -p "Enter mysql root password: " DB_PASS;while ! `mysql -u root -p$DB_PASS -e ";">/dev/null 2>&1`;do read -r -p "Can't connect, please retry: " DB_PASS;done;while [[ -z "$DB_PASS" ]];do read -r -p "Enter mysql root password: " DB_PASS;done;fi;MYSQL_CHECK_CONNECTION=`mysql -u root -p$DB_PASS -e ";">/dev/null 2>&1`;if [ $? -eq 0 ];then log "ok, I can connect to MySQL ...\n... creating database $DB ... ";MYSQL_CREATE_DATABASE=`echo CREATE DATABASE $DB|mysql -u root -p$DB_PASS>/dev/null 2>&1`;if [ $? -eq 0 ];then log "${GREEN}done!${RESTORE}\n";else log "${RED}failed!${RESTORE}\n";log "... database exists, ${YELLOW}double check before proceeding!${RESTORE}\n\n";while [[ -z "$PROCEED_DB_CREATE" ]];do read -r -p "Proceed? ${YELLOW}[Y/n]${RESTORE} " PROCEED_DB_CREATE;done;if [ "$PROCEED_DB_CREATE" != "y" ]&&[ "$PROCEED_DB_CREATE" != "Y" ];then abort "Constant in use [PLATFORM]_rlt_[PLATFORM_VERSION]! Please do not use this database name\n";fi;fi;else abort "Cannot connect to mysql!";fi;log "\nDatabase: ${GREEN}$DB${RESTORE}\n";log "Username: ${GREEN}root${RESTORE}\n";log "Password: ${GREEN}$DB_PASS${RESTORE}\n\n";if [ "$DB" == "" ]||[ "$DB_USER" == "" ]||[ "$DB_PASS" == "" ];then abort "Complete information is required in order to complete the installation!";fi;MV=$(strpos "$2" "2.4");if [ "$MV" != "" ];then log "\n${YELLOW}Ok, the requested Magento version is ${GREEN}$2${RESTORE} ${YELLOW}so we have to check for further settings!${RESTORE}\n\n";log "Searching for curl ... ";CURL=`curl --version 2>&1`;if [[ $? -eq 0 ]];then log "${GREEN}ok found!${RESTORE} \n";else log "${GREEN}not found${RESTORE} .. installing .. ";INSTALL_CURL=`apt-get install curl 2>&1`;if [ $? -eq 0 ];then log "${GREEN}done!${RESTORE} \n";else abort "curl not found \n";fi;fi;log "\nSearching for elasticsearch ... ";ES_VERSION=$(dpkg -l|awk '$2 ~ /^elasticsearch$/ { print $3 }');if [ ! -z $ES_VERSION ];then if dpkg --compare-versions $ES_VERSION ge 7.0;then log "${GREEN}ok ... elasticsearch $ES_VERSION found!${RESTORE} \n";es_status;log "Let me check whether it is using default host and port .. \n";log ">> establishing connection (http://localhost:9200/) \n";ES_PING=`curl -XGET "http://localhost:9200/_cat/health?v&pretty" 2>&1`;if [ $? -eq 0 ];then log ">> ... ${GREEN}ok${RESTORE} its default. \n";else log "\n${YELLOW}Interesting!${RESTORE} Elasticsearch is running but it is not communicating over default host and/or port .. \n";while [[ -z "$ES_HOST" ]];do read -r -p "Enter the custom host: " ES_HOST;done;while [[ -z "$ES_PORT" ]];do read -r -p "Enter the custom port: " ES_PORT;done;fi;else log "ok ... ${YELLOW}INCOMPATIBLE${RESTORE} elasticsearch $ES_VERSION found, Please update, right now I am proceeding!\n";fi;else log "${LRED}oops! not found${RESTORE} .. installing .. \n";ES_INSTALL=`wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch|sudo apt-key add - 2>&1`;if [ $? -eq 0 ];then log ">> ... ${GREEN}key added!${RESTORE} ;) \n";ES_INSTALL_2=`sudo apt-get install apt-transport-https 2>&1`;if [ $? -eq 0 ];then log ">> ... ${GREEN}apt-transport-https installed!${RESTORE} \m/ \n";ES_INSTALL_3=`echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main"|sudo tee /etc/apt/sources.list.d/elastic-7.x.list 2>&1`;if [ $? -eq 0 ];then log ">> ... ${GREEN}repository definition saved!${RESTORE} (Y) \n";ES_INSTALL_4=`sudo apt-get update&&sudo apt-get install elasticsearch 2>&1`;if [ $? -eq 0 ];then log ">> ${GREEN}elasticsearch installed!${RESTORE} ... yayyyy! \n";ES_INSTALL_5=`sudo /bin/systemctl daemon-reload 2>&1`;if [ $? -eq 0 ];then log "... ${GREEN}daemon reloaded!${RESTORE} ... 8) \n";ES_INSTALL_6=`sudo /bin/systemctl enable elasticsearch.service 2>&1`;if [ $? -eq 0 ];then log ">> ... ${GREEN}daemon added to systemctl!${RESTORE} ... ;) \n";log "Everything is done, rechecking elasticsearch ... \n";es_status;else abort "$ES_INSTALL_6";fi;else abort "$ES_INSTALL_5";fi;else abort "$ES_INSTALL_4";fi;else abort "$ES_INSTALL_3";fi;else abort "$ES_INSTALL_2";fi;else abort "$ES_INSTALL";fi;fi;fi;log "\nThank you, these details will be used for Installation, make sure that the provided information is correct.\n\n";log "Ok, now you are in final phase, before proceeding let me tell you that if you have ${YELLOW}Magento Private and Public Keys${RESTORE} along with ${YELLOW}Github OAuth Key${RESTORE} then you can proceed otherwise you can terminate this action safely by pressing ${YELLOW}CTRL+C${RESTORE} and manually install Magento.\n\n";log "${YELLOW}Worth to mention;${RESTORE}\n\n1. All selected configurations are implemented if you are on this step.\n";log "2. If you quit now, you have to install Magento manually.\n";log "3. You can restart the process.\n";log "4. Magento will be downloaded and installed via composer.\n\n";while [[ -z "$PROCEED_INSTALL" ]];do read -r -p "Proceed? ${YELLOW}[Y/n]${RESTORE} " PROCEED_INSTALL;done;if [ "$PROCEED_INSTALL" == "Y" ]||[ "$PROCEED_INSTALL" == "y" ];then log "Searching for composer ... ";composer_check(){ local VER_ARG=${1};log "${YELLOW}Keep in mind that Magento installation is failed with unsupported composer version, if it happens please search and install the compatible version manually and execute the command again to finish installation.${RESTORE}\n\n";log ">> ... self-update to compatible version 1.10.1 ... ";COMPOSER_INSTALL_3=`sudo -u $SUDOING_USER -H sh -c "sudo composer self-update 1.10.1" 2>&1`;if [ $? -eq 0 ];then log "${GREEN}done${RESTORE}\n";else abort "$COMPOSER_INSTALL_3";fi;log ">> ... changing permissions ... ";COMPOSER_INSTALL_4=`chown -R $SUDOING_USER:$SUDOING_USER ~/.composer 2>&1`;if [ $? -eq 0 ];then log "${GREEN}done${RESTORE}\n\n";else abort "$COMPOSER_INSTALL_4";fi;};COMPOSER=`sudo -u $SUDOING_USER -H sh -c "composer --version" 2>&1`;if [[ $? -eq 0 ]];then log "${GREEN}ok $COMPOSER found!${RESTORE}\n\n";composer_check "$COMPOSER";else log "${RED}not found${RESTORE} .. installing now ... \n";COMPOSER_INSTALL=`sudo -u $SUDOING_USER -H sh -c "curl -sS https://getcomposer.org/installer -o composer-setup.php" 2>&1`;if [ $? -eq 0 ];then log ">>... installer have been downloaded ...\n";COMPOSER_INSTALL_2=`sudo -u $SUDOING_USER -H sh -c "sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer" 2>&1`;if [ $? -eq 0 ];then log ">> ... it is installed, let me verify the installation ...\n";COMPOSER_INSTALL_2=`sudo -u $SUDOING_USER -H sh -c "composer --version" 2>&1`;if [ $? -eq 0 ];then log ">> ... ${GREEN}done${RESTORE} ... its ${YELLOW}$COMPOSER_INSTALL_2${RESTORE}\n\n";composer_check;fi;else abort "$COMPOSER_INSTALL_2";fi;else abort "$COMPOSER_INSTALL";fi;fi;log "To ensure installation is uninterrupted, last things required ... \n\n";log "${YELLOW}https://devdocs.magento.com/guides/v2.4/install-gde/prereq/connect-auth.html for more details!${RESTORE} \n\n";log "Reading config file ... ";CONFIG_FILE_READ_1=`sed '1q;d' $CONFIG_FILE`;CONFIG_FILE_READ_2=`sed '2q;d' $CONFIG_FILE`;CONFIG_FILE_READ_3=`sed '3q;d' $CONFIG_FILE`;if [ "$CONFIG_FILE_READ_1" != "" ]&&[ "$CONFIG_FILE_READ_2" != "" ]&&[ "$CONFIG_FILE_READ_3" != "" ];then log "${GREEN}i have found following details.${RESTORE}\n\n";log "Magento Public Key: ${GREEN}$CONFIG_FILE_READ_1${RESTORE}\n";log "Magento Private Key: ${GREEN}$CONFIG_FILE_READ_2${RESTORE}\n";log "Github OAuth Key: ${GREEN}$CONFIG_FILE_READ_3${RESTORE}\n\n";while [[ -z "$USE_KEYS" ]];do read -r -p "Do you want me to use this information? ${YELLOW}[Y/n]${RESTORE}: " USE_KEYS;done;else log "${YELLOW}not found!${RESTORE}\n\n";fi;if [ "$USE_KEYS" == "Y" ]||[ "$USE_KEYS" == "y" ];then Magento_Public_Key=$CONFIG_FILE_READ_1;Magento_Private_Key=$CONFIG_FILE_READ_2;Github_OAuth=$CONFIG_FILE_READ_3;else while [[ -z "$Magento_Public_Key" ]];do read -r -p "Enter Magento Public Key (repo.magento.com Username): " Magento_Public_Key;done;while [[ -z "$Magento_Private_Key" ]];do read -r -p "Enter Magento Private Key (repo.magento.com Password): " Magento_Private_Key;done;while [[ -z "$Github_OAuth" ]];do read -r -p "Enter Github OAuth Key: " Github_OAuth;done;if [ "$Magento_Public_Key" == "" ]||[ "$Magento_Private_Key" == "" ]||[ "$Github_OAuth" == "" ];then abort "Credentials are required in order to complete the installation!";fi;log "\nI can save this information so you don't have to provide them repeatedly;\n";while [[ -z "$SAVE_KEYS" ]];do read -r -p "Save information? ${YELLOW}[Y/n]${YELLOW}: " SAVE_KEYS;done;if [ "$SAVE_KEYS" == "Y" ]||[ "$SAVE_KEYS" == "y" ];then printf "$Magento_Public_Key\n"&>"${CONFIG_FILE}";printf "$Magento_Private_Key\n"&>>"${CONFIG_FILE}";printf "$Github_OAuth\n"&>>"${CONFIG_FILE}";log "${GREEN}\n>> Saved!${RESTORE}\n\n";else log "${YELLOW}\nok, I have skipped!${RESTORE}\n\n";fi;fi;PWD=`pwd 2>&1`;log "Navigating from $PWD ... ";NAVIGATE_DR=`cd $Path_Magento 2>&1`;if [ $? -eq 0 ];then log "we are in ${GREEN}$Path_Magento${RESTORE} \m/ \n\n";else abort "$NAVIGATE_DR";fi;log "${YELLOW}Well well well, at last, I am going to initiate the install procedure, keep following things in mind\n";log "1. Your internet connection should be stable.\n";log "2. Do not close the terminal, otherwise the process will be terminated.\n";log "3. Check your machine battery ;) ${RESTORE}connect it to charging cord.${YELLOW} \n";log "4. BE PATIENT :D \n";log "5. If the process is taking longer than expected then you might be disconnected from internet, if so, re execute the command.${RESTORE}\n";log "\nDownloading Magento $VDIR via Composer ...\n";sudo -u $SUDOING_USER -H sh -c "composer config -g http-basic.repo.magento.com $Magento_Public_Key $Magento_Private_Key";sudo -u $SUDOING_USER -H sh -c "composer create-project --repository=https://repo.magento.com/ magento/project-community-edition:$2 $Path_Magento";log "\nInstalling Magento $VDIR ... \n";sudo -u $SUDOING_USER -H sh -c "php $Path_Magento/bin/magento setup:install --base-url='http://$VDIR.rlt.com/' --db-host='localhost' --db-name='$DB' --db-user='$DB_USER' --db-password='$DB_PASS' --admin-firstname='Good' --admin-lastname='Name' --admin-email='good@email.com' --admin-user='admin' --admin-password='admin@123' --language='en_US' --currency='USD' --timezone='America/Chicago' --use-rewrites='1' --backend-frontname='admin'";else abort "Ok, I have terminated the action, if you are preferring manual mode then download the Magento archive, uncompress under $Path_Magento and navigate http://$VDIR.rlt.com to install ... \n... exiting .. bye!\n";fi;while [[ -z "$PROCEED_INSTALL_SAMPLE" ]];do read -r -p "Install another instance with sample data? ${YELLOW}[Y/n]${RESTORE} " PROCEED_INSTALL_SAMPLE;done